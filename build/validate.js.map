{"version":3,"sources":["../source/validate.js"],"names":["is_valid","arg_1","arg_2","arg_3","input","metadata","country","hasCountry","Error","hasTypes","undefined"],"mappings":";;;;;kBAgBwBA,Q;;AAhBxB;;;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,QAAT,CAAkBC,KAAlB,EAAyBC,KAAzB,EAAgCC,KAAhC,EACf;AAAA,2BAC6B,+BAAmBF,KAAnB,EAA0BC,KAA1B,EAAiCC,KAAjC,CAD7B;AAAA,KACSC,KADT,uBACSA,KADT;AAAA,KACgBC,QADhB,uBACgBA,QADhB;;AAGC,KAAI,CAACD,KAAL,EACA;AACC,SAAO,KAAP;AACA;;AAED,KAAI,CAACA,MAAME,OAAX,EACA;AACC,SAAO,KAAP;AACA;;AAED,KAAI,CAACD,SAASE,UAAT,CAAoBH,MAAME,OAA1B,CAAL,EACA;AACC,QAAM,IAAIE,KAAJ,uBAA8BJ,MAAME,OAApC,CAAN;AACA;;AAEDD,UAASC,OAAT,CAAiBF,MAAME,OAAvB;;AAEA,KAAID,SAASI,QAAT,EAAJ,EACA;AACC,SAAO,qBAAgBL,KAAhB,EAAuBC,SAASA,QAAhC,MAA8CK,SAArD;AACA;;AAED,QAAO,IAAP;AACA","file":"validate.js","sourcesContent":["import parse, { is_viable_phone_number } from './parse'\nimport get_number_type, { sort_out_arguments } from './types'\n\n// Checks if a given phone number is valid\n//\n// Example use cases:\n//\n// ```js\n// is_valid('8005553535', 'RU')\n// is_valid('8005553535', 'RU', metadata)\n// is_valid({ phone: '8005553535', country: 'RU' })\n// is_valid({ phone: '8005553535', country: 'RU' }, metadata)\n// is_valid('+78005553535')\n// is_valid('+78005553535', metadata)\n// ```\n//\nexport default function is_valid(arg_1, arg_2, arg_3)\n{\n\tconst { input, metadata } = sort_out_arguments(arg_1, arg_2, arg_3)\n\n\tif (!input)\n\t{\n\t\treturn false\n\t}\n\n\tif (!input.country)\n\t{\n\t\treturn false\n\t}\n\n\tif (!metadata.hasCountry(input.country))\n\t{\n\t\tthrow new Error(`Unknown country: ${input.country}`)\n\t}\n\n\tmetadata.country(input.country)\n\n\tif (metadata.hasTypes())\n\t{\n\t\treturn get_number_type(input, metadata.metadata) !== undefined\n\t}\n\n\treturn true\n}"]}