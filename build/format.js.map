{"version":3,"sources":["../source/format.js"],"names":["format","format_national_number_using_format","choose_format_for_number","local_to_international_style","default_options","formatExtension","number","extension","arg_1","arg_2","arg_3","arg_4","arg_5","sort_out_arguments","input","format_type","options","metadata","country","hasCountry","phone","countryCallingCode","selectedCountry","chooseCountryByCountryCallingCode","format_national_number","add_extension","ext","FIRST_GROUP_PATTERN","international","enforce_national_prefix","format_pattern_matcher","RegExp","pattern","national_prefix_may_be_omitted","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","replace","formatted_number","internationalFormat","format_as","formats","available_formats","national_number","leadingDigitsPatterns","length","last_leading_digits_pattern","search","local","trim","Error","is_object","TypeError","_"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of 17th November, 2016.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\n\nimport\n{\n\tparse_national_number_and_country_calling_code,\n\tVALID_PUNCTUATION,\n\tmatches_entirely\n}\nfrom './common'\n\nimport Metadata from './metadata'\n\nimport { formatRFC3966 } from './RFC3966'\n\nconst default_options =\n{\n\tformatExtension: (number, extension) => `${number} ext. ${extension}`\n}\n\n// Formats a phone number\n//\n// Example use cases:\n//\n// ```js\n// format('8005553535', 'RU', 'International')\n// format('8005553535', 'RU', 'International', metadata)\n// format({ phone: '8005553535', country: 'RU' }, 'International')\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\n// format('+78005553535', 'National')\n// format('+78005553535', 'National', metadata)\n// ```\n//\nexport default function format(arg_1, arg_2, arg_3, arg_4, arg_5)\n{\n\tconst\n\t{\n\t\tinput,\n\t\tformat_type,\n\t\toptions,\n\t\tmetadata\n\t}\n\t= sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\n\n\tif (input.country && metadata.hasCountry(input.country))\n\t{\n\t\tmetadata.country(input.country)\n\t}\n\n\tlet { countryCallingCode, number } = parse_national_number_and_country_calling_code(input.phone, metadata)\n\n\tcountryCallingCode = countryCallingCode || input.countryCallingCode\n\n\tif (countryCallingCode)\n\t{\n\t\t// Check country restriction\n\t\tif (input.country && metadata.selectedCountry() &&\n\t\t\tcountryCallingCode !== metadata.countryCallingCode())\n\t\t{\n\t\t\treturn input.phone\n\t\t}\n\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\n\t}\n\n\tif (!metadata.selectedCountry())\n\t{\n\t\treturn input.phone\n\t}\n\n\tswitch (format_type)\n\t{\n\t\tcase 'International':\n\t\t\tif (!number) {\n\t\t\t\treturn `+${metadata.countryCallingCode()}`\n\t\t\t}\n\t\t\tnumber = format_national_number(number, 'International', false, metadata)\n\t\t\tnumber = `+${metadata.countryCallingCode()} ${number}`\n\t\t\treturn add_extension(number, input.ext, options.formatExtension)\n\n\t\tcase 'E.164':\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\n\t\t\treturn `+${metadata.countryCallingCode()}${input.phone}`\n\n\t\tcase 'RFC3966':\n\t\t\treturn formatRFC3966\n\t\t\t({\n\t\t\t\tnumber : `+${metadata.countryCallingCode()}${input.phone}`,\n\t\t\t\text    : input.ext\n\t\t\t})\n\n\t\tcase 'National':\n\t\t\tif (!number) {\n\t\t\t\treturn ''\n\t\t\t}\n\t\t\tnumber = format_national_number(number, 'National', false, metadata)\n\t\t\treturn add_extension(number, input.ext, options.formatExtension)\n\t}\n}\n\n// This was originally set to $1 but there are some countries for which the\n// first group is not used in the national pattern (e.g. Argentina) so the $1\n// group does not match correctly.  Therefore, we use \\d, so that the first\n// group actually used in the pattern will be matched.\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\n\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, metadata)\n{\n\tconst format_pattern_matcher = new RegExp(format.pattern())\n\n\t// National prefix is omitted if there's no national prefix formatting rule\n\t// set for this country, or when this rule is set but\n\t// national prefix is optional for this phone number format\n\t// (and it is not enforced explicitly)\n\tconst national_prefix_may_be_omitted = !format.nationalPrefixFormattingRule() ||\n\t\t(format.nationalPrefixFormattingRule() && format.nationalPrefixIsOptionalWhenFormatting() && !enforce_national_prefix)\n\n\tif (!international && !national_prefix_may_be_omitted)\n\t{\n\t\treturn number.replace\n\t\t(\n\t\t\tformat_pattern_matcher,\n\t\t\tformat.format().replace\n\t\t\t(\n\t\t\t\tFIRST_GROUP_PATTERN,\n\t\t\t\tformat.nationalPrefixFormattingRule()\n\t\t\t)\n\t\t)\n\t}\n\n\tconst formatted_number = number.replace\n\t(\n\t\tformat_pattern_matcher,\n\t\tinternational ? format.internationalFormat() : format.format()\n\t)\n\n\tif (international)\n\t{\n\t\treturn local_to_international_style(formatted_number)\n\t}\n\n\treturn formatted_number\n}\n\nfunction format_national_number(number, format_as, enforce_national_prefix, metadata)\n{\n\tconst format = choose_format_for_number(metadata.formats(), number)\n\n\tif (!format)\n\t{\n\t\treturn number\n\t}\n\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, metadata)\n}\n\nexport function choose_format_for_number(available_formats, national_number)\n{\n\tfor (const format of available_formats)\n\t{\n\t\t// Validate leading digits\n\t\tif (format.leadingDigitsPatterns().length > 0)\n\t\t{\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\n\n\t\t\t// If leading digits don't match then move on to the next phone number format\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\n\t\t\t{\n\t\t\t\tcontinue\n\t\t\t}\n\t\t}\n\n\t\t// Check that the national number matches the phone number format regular expression\n\t\tif (matches_entirely(national_number, new RegExp(format.pattern())))\n\t\t{\n\t\t\treturn format\n\t\t}\n\t}\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\nexport function local_to_international_style(local)\n{\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\n}\n\n// Sort out arguments\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\n{\n\tlet input\n\tlet format_type\n\tlet options\n\tlet metadata\n\n\t// Sort out arguments.\n\n\t// If the phone number is passed as a string.\n\t// `format('8005553535', ...)`.\n\tif (typeof arg_1 === 'string')\n\t{\n\t\t// If country code is supplied.\n\t\t// `format('8005553535', 'RU', 'National', [options], metadata)`.\n\t\tif (typeof arg_3 === 'string')\n\t\t{\n\t\t\t// Will be `parse()`d later in code\n\t\t\tinput =\n\t\t\t{\n\t\t\t\tphone   : arg_1,\n\t\t\t\tcountry : arg_2\n\t\t\t}\n\n\t\t\tformat_type = arg_3\n\n\t\t\tif (arg_5)\n\t\t\t{\n\t\t\t\toptions  = arg_4\n\t\t\t\tmetadata = arg_5\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmetadata = arg_4\n\t\t\t}\n\t\t}\n\t\t// Just an international phone number is supplied\n\t\t// `format('+78005553535', 'National', [options], metadata)`.\n\t\telse\n\t\t{\n\t\t\t// Will be `parse()`d later in code\n\t\t\tinput =\n\t\t\t{\n\t\t\t\tphone : arg_1\n\t\t\t}\n\n\t\t\tif (typeof arg_2 !== 'string')\n\t\t\t{\n\t\t\t\tthrow new Error('Format type argument not passed for `format()`')\n\t\t\t}\n\n\t\t\tformat_type = arg_2\n\n\t\t\tif (arg_4)\n\t\t\t{\n\t\t\t\toptions  = arg_3\n\t\t\t\tmetadata = arg_4\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tmetadata = arg_3\n\t\t\t}\n\t\t}\n\t}\n\t// If the phone number is passed as a parsed number object.\n\t// `format({ phone: '8005553535', country: 'RU' }, 'National', [options], metadata)`.\n\telse if (is_object(arg_1) && typeof arg_1.phone === 'string')\n\t{\n\t\tinput       = arg_1\n\t\tformat_type = arg_2\n\n\t\tif (arg_4)\n\t\t{\n\t\t\toptions  = arg_3\n\t\t\tmetadata = arg_4\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmetadata = arg_3\n\t\t}\n\t}\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\n\n\t// Metadata is required.\n\tif (!metadata)\n\t{\n\t\tthrow new Error('Metadata is required')\n\t}\n\n\t// Validate `format_type`.\n\tswitch (format_type)\n\t{\n\t\tcase 'International':\n\t\tcase 'E.164':\n\t\tcase 'National':\n\t\tcase 'RFC3966':\n\t\t\tbreak\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\n\t}\n\n\t// Apply default options.\n\tif (options)\n\t{\n\t\toptions = { ...default_options, ...options }\n\t}\n\telse\n\t{\n\t\toptions = default_options\n\t}\n\n\treturn { input, format_type, options, metadata: new Metadata(metadata) }\n}\n\n// Babel transforms `typeof` into some \"branches\"\n// so istanbul will show this as \"branch not covered\".\n/* istanbul ignore next */\nconst is_object = _ => typeof _ === 'object'\n\nfunction add_extension(number, ext, formatExtension)\n{\n\treturn ext ? formatExtension(number, ext) : number\n}"]}