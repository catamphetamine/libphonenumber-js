{"version":3,"sources":["../source/formatForMobileDialing.js"],"names":["number","from_country","with_formatting","metadata","hasCountry","Error","phone","country","number_type","is_valid_number","formatted_number","is_fixed_line_or_mobile","formatNationalNumberWithCarrierCode","COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX","getPreferredDomesticCarrierCodeOrDefault","length","formatNationalNumberWithPreferredCarrierCode","nationalPrefix","can_be_internationally_dialled","undefined","diallable_chars","DIALLABLE_CHARACTERS","result","i","character"],"mappings":"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","file":"formatForMobileDialing.js","sourcesContent":["// This function is copy-pasted from\n// https://github.com/googlei18n/libphonenumber/blob/master/javascript/i18n/phonenumbers/phonenumberutil.js\n// It hasn't been tested.\n// Carriers codes aren't part of this library.\n// Send a PR if you want to add them.\n\nimport Metadata from './metadata'\n\nimport format from './format'\nimport get_number_type, { check_number_length_for_type } from './types'\nimport getCountryCallingCode from './getCountryCallingCode'\nimport { REGION_CODE_FOR_NON_GEO_ENTITY } from './common'\n\n/**\n * The prefix that needs to be inserted in front of a Colombian landline number\n * when dialed from a mobile phone in Colombia.\n */\nconst COLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX = '3'\n\n/**\n * Returns a number formatted in such a way that it can be dialed from a mobile\n * phone in a specific region. If the number cannot be reached from the region\n * (e.g. some countries block toll-free numbers from being called outside of the\n * country), the method returns an empty string.\n *\n * @param {object} number - a `parse()`d phone number to be formatted.\n * @param {string} from_country - the region where the call is being placed.\n * @param {boolean} with_formatting - whether the number should be returned with\n *     formatting symbols, such as spaces and dashes.\n * @return {string}\n */\nexport default function(number, from_country, with_formatting, metadata)\n{\n\tmetadata = new Metadata(metadata)\n\n\t// Validate `from_country`.\n\tif (!metadata.hasCountry(from_country))\n\t{\n\t\tthrow new Error(`Unknown country: ${from_country}`)\n\t}\n\n\t// Not using the extension, as that part cannot normally be dialed\n\t// together with the main number.\n\tnumber = {\n\t\tphone   : number.phone,\n\t\tcountry : number.country\n\t}\n\n\tconst number_type = get_number_type(number, metadata.metadata)\n\tconst is_valid_number = number_type === number\n\n\tlet formatted_number\n\n\tif (country === from_country)\n\t{\n\t\tconst is_fixed_line_or_mobile =\n\t\t\tnumber_type === 'FIXED_LINE' ||\n\t\t\tnumber_type === 'MOBILE' ||\n\t\t\tnumber_type === 'FIXED_LINE_OR_MOBILE'\n\n\t\t// Carrier codes may be needed in some countries. We handle this here.\n\t\tif (country === 'CO' && number_type === 'FIXED_LINE')\n\t\t{\n\t\t\tformatted_number = formatNationalNumberWithCarrierCode\n\t\t\t(\n\t\t\t\tnumber,\n\t\t\t\tCOLOMBIA_MOBILE_TO_FIXED_LINE_PREFIX\n\t\t\t)\n\t\t}\n\t\telse if (country == 'BR' && is_fixed_line_or_mobile)\n\t\t{\n\t\t\tformatted_number =\n\t\t\t\t// Historically, we set this to an empty string when parsing with raw\n\t\t\t\t// input if none was found in the input string. However, this doesn't\n\t\t\t\t// result in a number we can dial. For this reason, we treat the empty\n\t\t\t\t// string the same as if it isn't set at all.\n\t\t\t\tgetPreferredDomesticCarrierCodeOrDefault(number).length > 0 ?\n\t\t\t\tformatNationalNumberWithPreferredCarrierCode(number, '') :\n\t\t\t\t// Brazilian fixed line and mobile numbers need to be dialed with a\n\t\t\t\t// carrier code when called within Brazil. Without that, most of the\n\t\t\t\t// carriers won't connect the call. Because of that, we return an\n\t\t\t\t// empty string here.\n\t\t\t\t''\n\t\t}\n\t\telse if (is_valid_number && country == 'HU')\n\t\t{\n\t\t\t// The national format for HU numbers doesn't contain the national prefix,\n\t\t\t// because that is how numbers are normally written down. However, the\n\t\t\t// national prefix is obligatory when dialing from a mobile phone. As a\n\t\t\t// result, we add it back here if it is a valid regular length phone\n\t\t\t// number.\n\n      // Select country for `.nationalPrefix()`.\n      metadata.country(country)\n\n\t\t\tformatted_number = metadata.nationalPrefix() + ' ' + format(number, 'NATIONAL', metadata.metadata)\n\t\t}\n\t\telse if (getCountryCallingCode(country, metadata.metadata) === '1')\n\t\t{\n      // For NANPA countries, we output international format for numbers that\n      // can be dialed internationally, since that always works, except for\n      // numbers which might potentially be short numbers, which are always\n      // dialled in national format.\n\n      // Select country for `check_number_length_for_type()`.\n      metadata.country(country)\n\n      if (can_be_internationally_dialled(number) &&\n          check_number_length_for_type(number.phone, undefined, metadata) !== 'TOO_SHORT')\n\t\t\t{\n\t\t\t\tformatted_number = format(number, 'International', metadata.metadata)\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tformatted_number = format(number, 'National', metadata.metadata)\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n      // For non-geographical countries, Mexican and Chilean fixed line and\n      // mobile numbers, we output international format for numbers that can be\n      // dialed internationally, as that always works.\n      if\n      (\n      \t(\n      \t\tcountry === REGION_CODE_FOR_NON_GEO_ENTITY\n      \t\t||\n\t        // MX fixed line and mobile numbers should always be formatted in\n\t        // international format, even when dialed within MX. For national\n\t        // format to work, a carrier code needs to be used, and the correct\n\t        // carrier code depends on if the caller and callee are from the\n\t        // same local area. It is trickier to get that to work correctly than\n\t        // using international format, which is tested to work fine on all\n\t        // carriers.\n\t        // CL fixed line numbers need the national prefix when dialing in the\n\t        // national format, but don't have it when used for display. The\n\t        // reverse is true for mobile numbers. As a result, we output them in\n\t        // the international format to make it work.\n\t        ((country === 'MX' || country === 'CL') && is_fixed_line_or_mobile)\n        )\n      \t&&\n        can_be_internationally_dialled(number)\n      )\n      {\n        formatted_number = format(number, 'International')\n      }\n      else\n      {\n        formatted_number = format(number, 'National')\n      }\n    }\n  }\n  else if (is_valid_number && can_be_internationally_dialled(number))\n  {\n    // We assume that short numbers are not diallable from outside their region,\n    // so if a number is not a valid regular length phone number, we treat it as\n    // if it cannot be internationally dialled.\n    return with_formatting ?\n        format(number, 'International', metadata.metadata) :\n        format(number, 'E.164', metadata.metadata)\n  }\n\n  if (!with_formatting)\n  {\n  \treturn diallable_chars(formatted_number)\n  }\n\n  return formatted_number\n}\n\nfunction can_be_internationally_dialled(number)\n{\n\treturn true\n}\n\n/**\n * A map that contains characters that are essential when dialling. That means\n * any of the characters in this map must not be removed from a number when\n * dialling, otherwise the call will not reach the intended destination.\n */\nconst DIALLABLE_CHARACTERS =\n{\n  '0': '0',\n  '1': '1',\n  '2': '2',\n  '3': '3',\n  '4': '4',\n  '5': '5',\n  '6': '6',\n  '7': '7',\n  '8': '8',\n  '9': '9',\n  '+': '+',\n  '*': '*',\n  '#': '#'\n}\n\nfunction diallable_chars(formatted_number)\n{\n\tlet result = ''\n\n\tlet i = 0\n\twhile (i < formatted_number.length)\n\t{\n\t\tconst character = formatted_number[i]\n\t\tif (DIALLABLE_CHARACTERS[character])\n\t\t{\n\t\t\tresult += character\n\t\t}\n\t\ti++\n\t}\n\n\treturn result\n}\n\nfunction getPreferredDomesticCarrierCodeOrDefault()\n{\n\tthrow new Error('carrier codes are not part of this library')\n}\n\nfunction formatNationalNumberWithCarrierCode()\n{\n\tthrow new Error('carrier codes are not part of this library')\n}\n\nfunction formatNationalNumberWithPreferredCarrierCode()\n{\n\tthrow new Error('carrier codes are not part of this library')\n}"]}