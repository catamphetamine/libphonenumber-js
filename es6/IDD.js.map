{"version":3,"sources":["../source/IDD.js"],"names":["Metadata","matches_entirely","VALID_DIGITS","CAPTURING_DIGIT_PATTERN","RegExp","SINGLE_IDD_PREFIX","getIDDPrefix","country","metadata","countryMetadata","IDDPrefix","defaultIDDPrefix","stripIDDPrefix","number","IDDPrefixPattern","search","slice","match","length","matchedGroups"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,SAASC,gBAAT,EAA2BC,YAA3B,QAA+C,UAA/C;;AAEA,IAAMC,0BAA0B,IAAIC,MAAJ,CAAW,OAAOF,YAAP,GAAsB,IAAjC,CAAhC;;AAEA;;;;;;;;;AASA,IAAMG,oBAAoB,wCAA1B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAA+BC,QAA/B,EACP;AACC,KAAMC,kBAAkB,IAAIT,QAAJ,CAAaQ,QAAb,CAAxB;AACAC,iBAAgBF,OAAhB,CAAwBA,OAAxB;;AAEA,KAAIN,iBAAiBQ,gBAAgBC,SAAhB,EAAjB,EAA8CL,iBAA9C,CAAJ,EACA;AACC,SAAOI,gBAAgBC,SAAhB,EAAP;AACA;;AAED,QAAOD,gBAAgBE,gBAAhB,EAAP;AACA;;AAED,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgCN,OAAhC,EAAyCC,QAAzC,EACP;AACC,KAAI,CAACD,OAAL,EAAc;AACb;AACA;;AAED;;AAEA,KAAME,kBAAkB,IAAIT,QAAJ,CAAaQ,QAAb,CAAxB;AACAC,iBAAgBF,OAAhB,CAAwBA,OAAxB;;AAEA,KAAMO,mBAAmB,IAAIV,MAAJ,CAAWK,gBAAgBC,SAAhB,EAAX,CAAzB;;AAEA,KAAIG,OAAOE,MAAP,CAAcD,gBAAd,MAAoC,CAAxC,EAA2C;AAC1C;AACA;;AAED;AACAD,UAASA,OAAOG,KAAP,CAAaH,OAAOI,KAAP,CAAaH,gBAAb,EAA+B,CAA/B,EAAkCI,MAA/C,CAAT;;AAEA;AACA;AACA,KAAMC,gBAAgBN,OAAOI,KAAP,CAAad,uBAAb,CAAtB;AACA;AACA,KAAIgB,iBAAiBA,cAAc,CAAd,KAAoB,IAArC,IAA6CA,cAAc,CAAd,EAAiBD,MAAjB,GAA0B,CAA3E,EACA;AACC,MAAIC,cAAc,CAAd,MAAqB,GAAzB,EACA;AACC;AACA;AACD;;AAED,QAAON,MAAP;AACA","file":"IDD.js","sourcesContent":["import Metadata from './metadata'\nimport { matches_entirely, VALID_DIGITS } from './common'\n\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\n\n/**\n * Pattern that makes it easy to distinguish whether a region has a single\n * international dialing prefix or not. If a region has a single international\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\n * the tone. If there are multiple available international prefixes in a\n * region, they will be represented as a regex string that always contains one\n * or more characters that are not ASCII digits or a tilde.\n */\nconst SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\n\n// export function isSingleIDDPrefix(IDDPrefix)\n// {\n// \treturn matches_entirely(IDDPrefix, SINGLE_IDD_PREFIX)\n// }\n\n// For regions that have multiple IDD prefixes\n// a preferred IDD prefix is returned.\nexport function getIDDPrefix(country, metadata)\n{\n\tconst countryMetadata = new Metadata(metadata)\n\tcountryMetadata.country(country)\n\n\tif (matches_entirely(countryMetadata.IDDPrefix(), SINGLE_IDD_PREFIX))\n\t{\n\t\treturn countryMetadata.IDDPrefix()\n\t}\n\n\treturn countryMetadata.defaultIDDPrefix()\n}\n\nexport function stripIDDPrefix(number, country, metadata)\n{\n\tif (!country) {\n\t\treturn\n\t}\n\n\t// Check if the number is IDD-prefixed.\n\n\tconst countryMetadata = new Metadata(metadata)\n\tcountryMetadata.country(country)\n\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\n\n\tif (number.search(IDDPrefixPattern) !== 0) {\n\t\treturn\n\t}\n\n\t// Strip IDD prefix.\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\n\n\t// Some kind of a weird edge case.\n\t// No explanation from Google given.\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\n\t/* istanbul ignore next */\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\n\t{\n\t\tif (matchedGroups[1] === '0')\n\t\t{\n\t\t\treturn\n\t\t}\n\t}\n\n\treturn number\n}"]}