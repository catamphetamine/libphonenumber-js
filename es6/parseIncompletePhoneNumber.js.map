{"version":3,"sources":["../source/parseIncompletePhoneNumber.js"],"names":["parseDigit","parseIncompletePhoneNumber","string","result","split","character","parsePhoneNumberCharacter","value"],"mappings":"AAAA,SAASA,UAAT,QAA2B,UAA3B;;AAEA;;;;;;;;;;;;;;;AAeA,eAAe,SAASC,0BAAT,CAAoCC,MAApC,EACf;AACC,KAAIC,SAAS,EAAb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAwBD,OAAOE,KAAP,CAAa,EAAb,CAAxB,kHACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,MADWC,SACX;;AACCF,YAAUG,0BAA0BD,SAA1B,EAAqCF,MAArC,KAAgD,EAA1D;AACA;;AAED,QAAOA,MAAP;AACA;;AAED;;;;;;;;AAQA,OAAO,SAASG,yBAAT,CAAmCD,SAAnC,EAA8CE,KAA9C,EACP;AACC;AACA,KAAIF,cAAc,GAAlB,EACA;AACC;AACA;AACA,MAAIE,KAAJ,EAAW;AACV;AACA;;AAED,SAAO,GAAP;AACA;;AAED;AACA,QAAOP,WAAWK,SAAX,CAAP;AACA","file":"parseIncompletePhoneNumber.js","sourcesContent":["import { parseDigit } from './common'\n\n/**\n * Parses phone number characters from a string.\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\n * @param  {string} string\n * @return {string}\n * @example\n * ```js\n * parseIncompletePhoneNumber('8 (800) 555')\n * // Outputs '8800555'.\n * parseIncompletePhoneNumber('+7 800 555')\n * // Outputs '+7800555'.\n * ```\n */\nexport default function parseIncompletePhoneNumber(string)\n{\n\tlet result = ''\n\n\t// Using `.split('')` here instead of normal `for ... of`\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\n\t// (the ones consisting of four bytes) but digits\n\t// (including non-European ones) don't fall into that range\n\t// so such \"exotic\" characters would be discarded anyway.\n\tfor (const character of string.split(''))\n\t{\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\n\t}\n\n\treturn result\n}\n\n/**\n * `input-format` `parse()` function.\n * https://github.com/catamphetamine/input-format\n * @param  {string} character - Yet another character from raw input string.\n * @param  {string} value - The value parsed so far.\n * @param  {object} meta - Optional custom use-case-specific metadata.\n * @return {string?} The parsed character.\n */\nexport function parsePhoneNumberCharacter(character, value)\n{\n\t// Only allow a leading `+`.\n\tif (character === '+')\n\t{\n\t\t// If this `+` is not the first parsed character\n\t\t// then discard it.\n\t\tif (value) {\n\t\t\treturn\n\t\t}\n\n\t\treturn '+'\n\t}\n\n\t// Allow digits.\n\treturn parseDigit(character)\n}"]}