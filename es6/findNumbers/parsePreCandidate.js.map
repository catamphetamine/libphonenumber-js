{"version":3,"sources":["../../source/findNumbers/parsePreCandidate.js"],"names":["trimAfterFirstMatch","SECOND_NUMBER_START_PATTERN","parsePreCandidate","candidate"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,QAApC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,8BAA8B,UAApC;;AAEA,eAAe,SAASC,iBAAT,CAA2BC,SAA3B,EACf;AACC;AACA;AACA;AACA,QAAOH,oBAAoBC,2BAApB,EAAiDE,SAAjD,CAAP;AACA","file":"parsePreCandidate.js","sourcesContent":["import { trimAfterFirstMatch } from './util'\n\n// Regular expression of characters typically used to start a second phone number for the purposes\n// of parsing. This allows us to strip off parts of the number that are actually the start of\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\n// extension so that the first number is parsed correctly.\n//\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\n//\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\n\nexport default function parsePreCandidate(candidate)\n{\n\t// Check for extra numbers at the end.\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\n\t// from split notations (+41 79 123 45 67 / 68).\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\n}"]}