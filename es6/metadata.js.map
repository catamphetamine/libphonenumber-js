{"version":3,"sources":["../source/metadata.js"],"names":["compare","V2","Metadata","metadata","countries","Error","v1","version","v2","country","undefined","_country","country_metadata","hasCountry","formats","map","Format","_","nationalPrefix","types","type","hasTypes","getType","Type","country_phone_code_to_countries","country_calling_codes","country_calling_code","countryCallingCodes","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","usesNationalPrefix","test","replace","possibleLengths"],"mappings":"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","file":"metadata.js","sourcesContent":["import compare from 'semver-compare'\n\n// Added \"possibleLengths\" and renamed\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\nconst V2 = '1.0.18'\n\nexport default class Metadata\n{\n\tconstructor(metadata)\n\t{\n\t\t// Metadata is required.\n\t\tif (!metadata || !metadata.countries)\n\t\t{\n\t\t\tthrow new Error('Metadata is required')\n\t\t}\n\n\t\tthis.metadata = metadata\n\n\t\tthis.v1 = !metadata.version\n\t\tthis.v2 = metadata.version // && compare(version, V3) === -1\n\t}\n\n\thasCountry(country)\n\t{\n\t\treturn this.metadata.countries[country] !== undefined\n\t}\n\n\tcountry(country)\n\t{\n\t\tif (!country)\n\t\t{\n\t\t\tthis._country = undefined\n\t\t\tthis.country_metadata = undefined\n\t\t\treturn this\n\t\t}\n\n\t\tif (!this.hasCountry(country))\n\t\t{\n\t\t\tthrow new Error(`Unknown country: ${country}`)\n\t\t}\n\n\t\tthis._country = country\n\t\tthis.country_metadata = this.metadata.countries[country]\n\t\treturn this\n\t}\n\n\tcountryCallingCode()\n\t{\n\t\treturn this.country_metadata[0]\n\t}\n\n\tnationalNumberPattern()\n\t{\n\t\treturn this.country_metadata[1]\n\t}\n\n\tpossibleLengths()\n\t{\n\t\tif (this.v1) return\n\t\treturn this.country_metadata[2]\n\t}\n\n\tformats()\n\t{\n\t\tconst formats = this.country_metadata[this.v1 ? 2 : 3] || []\n\t\treturn formats.map(_ => new Format(_, this))\n\t}\n\n\tnationalPrefix()\n\t{\n\t\treturn this.country_metadata[this.v1 ? 3 : 4]\n\t}\n\n\tnationalPrefixFormattingRule()\n\t{\n\t\treturn this.country_metadata[this.v1 ? 4 : 5]\n\t}\n\n\tnationalPrefixForParsing()\n\t{\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\n\t\t// then infer it from `national_prefix` (if any)\n\t\treturn this.country_metadata[this.v1 ? 5 : 6] || this.nationalPrefix()\n\t}\n\n\tnationalPrefixTransformRule()\n\t{\n\t\treturn this.country_metadata[this.v1 ? 6 : 7]\n\t}\n\n\tnationalPrefixIsOptionalWhenFormatting()\n\t{\n\t\treturn this.country_metadata[this.v1 ? 7 : 8]\n\t}\n\n\tleadingDigits()\n\t{\n\t\treturn this.country_metadata[this.v1 ? 8 : 9]\n\t}\n\n\ttypes()\n\t{\n\t\treturn this.country_metadata[this.v1 ? 9 : 10]\n\t}\n\n\thasTypes()\n\t{\n\t\treturn this.types() !== undefined\n\t}\n\n\ttype(type)\n\t{\n\t\tif (this.hasTypes() && getType(this.types(), type))\n\t\t{\n\t\t\treturn new Type(getType(this.types(), type), this)\n\t\t}\n\t}\n\n\tcountryCallingCodes()\n\t{\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\n\t\treturn this.metadata.country_calling_codes\n\t}\n\n\t// Formatting information for regions which share\n\t// a country calling code is contained by only one region\n\t// for performance reasons. For example, for NANPA region\n\t// (\"North American Numbering Plan Administration\",\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\n\t// it will be contained in the metadata for `US`.\n\t//\n\t// `country_calling_code` is always valid.\n\t// But the actual country may not necessarily be part of the metadata.\n\t//\n\tchooseCountryByCountryCallingCode(country_calling_code)\n\t{\n\t\tconst country = this.countryCallingCodes()[country_calling_code][0]\n\n\t\t// Do not want to test this case.\n\t\t// (custom metadata, not all countries).\n\t\t/* istanbul ignore else */\n\t\tif (this.hasCountry(country))\n\t\t{\n\t\t\tthis.country(country)\n\t\t}\n\t}\n\n\tselectedCountry()\n\t{\n\t\treturn this._country\n\t}\n}\n\nclass Format\n{\n\tconstructor(format, metadata)\n\t{\n\t\tthis._format = format\n\t\tthis.metadata = metadata\n\t}\n\n\tpattern()\n\t{\n\t\treturn this._format[0]\n\t}\n\n\tformat()\n\t{\n\t\treturn this._format[1]\n\t}\n\n\tleadingDigitsPatterns()\n\t{\n\t\treturn this._format[2] || []\n\t}\n\n\tnationalPrefixFormattingRule()\n\t{\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\n\t}\n\n\tnationalPrefixIsOptionalWhenFormatting()\n\t{\n\t\treturn this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormatting()\n\t}\n\n\tnationalPrefixIsMandatoryWhenFormatting()\n\t{\n\t\t// National prefix is omitted if there's no national prefix formatting rule\n\t\t// set for this country, or when the national prefix formatting rule\n\t\t// contains no national prefix itself, or when this rule is set but\n\t\t// national prefix is optional for this phone number format\n\t\t// (and it is not enforced explicitly)\n\t\treturn this.nationalPrefixFormattingRule() &&\n\t\t\t// Check that national prefix formatting rule is not a dummy one.\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s).\n\t\t\tthis.usesNationalPrefix() &&\n\t\t\t// Or maybe national prefix is optional for this format\n\t\t\t!this.nationalPrefixIsOptionalWhenFormatting()\n\t}\n\n\t// Checks whether national prefix formatting rule contains national prefix\n\tusesNationalPrefix()\n\t{\n\t\t// Check that national prefix formatting rule is not a dummy one\n\t\treturn this.nationalPrefixFormattingRule() !== '$1' &&\n\t\t\t// Check that national prefix formatting rule actually has national prefix digit(s)\n\t\t\t/\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\n\t}\n\n\tinternationalFormat()\n\t{\n\t\treturn this._format[5] || this.format()\n\t}\n}\n\nclass Type\n{\n\tconstructor(type, metadata)\n\t{\n\t\tthis.type = type\n\t\tthis.metadata = metadata\n\t}\n\n\tpattern()\n\t{\n\t\tif (this.metadata.v1) return this.type\n\t\treturn this.type[0]\n\t}\n\n\tpossibleLengths()\n\t{\n\t\tif (this.metadata.v1) return\n\t\treturn this.type[1] || this.metadata.possibleLengths()\n\t}\n}\n\nfunction getType(types, type)\n{\n\tswitch (type)\n\t{\n\t\tcase 'FIXED_LINE':\n\t\t\treturn types[0]\n\t\tcase 'MOBILE':\n\t\t\treturn types[1]\n\t\tcase 'TOLL_FREE':\n\t\t\treturn types[2]\n\t\tcase 'PREMIUM_RATE':\n\t\t\treturn types[3]\n\t\tcase 'PERSONAL_NUMBER':\n\t\t\treturn types[4]\n\t\tcase 'VOICEMAIL':\n\t\t\treturn types[5]\n\t\tcase 'UAN':\n\t\t\treturn types[6]\n\t\tcase 'PAGER':\n\t\t\treturn types[7]\n\t\tcase 'VOIP':\n\t\t\treturn types[8]\n\t\tcase 'SHARED_COST':\n\t\t\treturn types[9]\n\t}\n}"]}