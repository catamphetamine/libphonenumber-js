{"version":3,"sources":["../source/isValidNumberForRegion.js"],"names":["sort_out_arguments","isValidNumber","isValidNumberForRegion","number","country","_metadata","TypeError","input","metadata"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,iBAAnC;AACA,OAAOC,aAAP,MAA0B,YAA1B;;AAEA;;;;;;;;;;;;;;AAcA,eAAe,SAASC,sBAAT,CAAgCC,MAAhC,EAAwCC,OAAxC,EAAiDC,SAAjD,EACf;AACC,MAAI,OAAOF,MAAP,KAAkB,QAAtB,EACA;AACC,UAAM,IAAIG,SAAJ,CAAc,yBAAd,CAAN;AACA;;AAED,MAAI,OAAOF,OAAP,KAAmB,QAAvB,EACA;AACC,UAAM,IAAIE,SAAJ,CAAc,0BAAd,CAAN;AACA;;AATF,4BAW6BN,mBAAmBG,MAAnB,EAA2BC,OAA3B,EAAoCC,SAApC,CAX7B;AAAA,MAWSE,KAXT,uBAWSA,KAXT;AAAA,MAWgBC,QAXhB,uBAWgBA,QAXhB;;AAaC,SAAOD,MAAMH,OAAN,KAAkBA,OAAlB,IAA6BH,cAAcM,KAAd,EAAqBC,SAASA,QAA9B,CAApC;AACA","file":"isValidNumberForRegion.js","sourcesContent":["import { sort_out_arguments } from './getNumberType'\nimport isValidNumber from './validate'\n\n/**\n * Checks if a given phone number is valid.\n *\n * If the `number` is a string, it will be parsed to an object,\n * but only if it contains only valid phone number characters.\n * If the `number` is an object, it is used as is.\n *\n * The `country` argument is the country the number must belong to.\n * This is a stricter version of `isValidNumber(number, defaultCountry)`.\n * Though restricting a country might not be a good idea.\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\n *\n * Doesn't accept `number` object, only `number` string with a `country` string.\n */\nexport default function isValidNumberForRegion(number, country, _metadata)\n{\n\tif (typeof number !== 'string')\n\t{\n\t\tthrow new TypeError('number must be a string')\n\t}\n\n\tif (typeof country !== 'string')\n\t{\n\t\tthrow new TypeError('country must be a string')\n\t}\n\n\tconst { input, metadata } = sort_out_arguments(number, country, _metadata)\n\n\treturn input.country === country && isValidNumber(input, metadata.metadata)\n}"]}