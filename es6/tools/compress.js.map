{"version":3,"sources":["../../source/tools/compress.js"],"names":["compress","input","countries","country_code","country","country_array","phone_code","national_number_pattern","possible_lengths","formats","map","format","format_array","pattern","leading_digits_patterns","national_prefix_formatting_rule","national_prefix_is_optional_when_formatting","international_format","trim_array","national_prefix","national_prefix_for_parsing","national_prefix_transform_rule","leading_digits","types","types_array","fixed_line","mobile","toll_free","premium_rate","personal_number","voice_mail","uan","pager","voip","shared_cost","type","push","version","country_calling_codes","is_empty","value","undefined","Array","isArray","length","array","pop"],"mappings":";;AAAA,eAAe,SAASA,QAAT,CAAkBC,KAAlB,EACf;AACC,KAAMC,YAAY,EAAlB;;AADD;AAAA;AAAA;;AAAA;AAGC,oCAA2B,aAAYD,MAAMC,SAAlB,CAA3B,4GACA;AAAA,OADWC,YACX;;AACC,OAAMC,UAAUH,MAAMC,SAAN,CAAgBC,YAAhB,CAAhB;;AAEA;AACA,OAAME,gBACN,CACCD,QAAQE,UADT,EAECF,QAAQG,uBAFT,EAICH,QAAQI,gBAJT;AAKC;;AAEAJ,WAAQK,OAAR,CAAgBC,GAAhB,CAAoB,UAACC,MAAD,EACpB;AACC;AACA,QAAMC,eACN,CACCD,OAAOE,OADR,EAECF,OAAOA,MAFR,EAGCA,OAAOG,uBAHR,EAICH,OAAOI,+BAJR,EAKCJ,OAAOK,2CALR,EAMCL,OAAOM,oBANR,CADA;;AAUA,WAAOC,WAAWN,YAAX,CAAP;AACA,IAdD,CAPD,EAuBCR,QAAQe,eAvBT,EAwBCf,QAAQW,+BAxBT,EAyBCX,QAAQgB,2BAzBT,EA0BChB,QAAQiB,8BA1BT,EA2BCjB,QAAQY,2CA3BT,EA4BCZ,QAAQkB,cA5BT,CADA;;AAgCA,OAAIlB,QAAQmB,KAAZ,EACA;AACC,QAAMC,cACN;AACC;AACApB,YAAQmB,KAAR,CAAcE,UAFf,EAGCrB,QAAQmB,KAAR,CAAcG,MAHf,EAICtB,QAAQmB,KAAR,CAAcI,SAJf,EAKCvB,QAAQmB,KAAR,CAAcK,YALf,EAMCxB,QAAQmB,KAAR,CAAcM,eANf;;AAQC;AACAzB,YAAQmB,KAAR,CAAcO,UATf,EAUC1B,QAAQmB,KAAR,CAAcQ,GAVf,EAWC3B,QAAQmB,KAAR,CAAcS,KAXf,EAYC5B,QAAQmB,KAAR,CAAcU,IAZf,EAaC7B,QAAQmB,KAAR,CAAcW,WAbf,EAeCxB,GAfD,CAeK,UAACyB,IAAD;AAAA,YAAUA,QAAQjB,WACtB,CACAiB,KAAKtB,OADL,EAEAsB,KAAK3B;AACL;AAHA,MADsB,CAAlB;AAAA,KAfL,CADA;;AAuBAH,kBAAc+B,IAAd,CAAmBlB,WAAWM,WAAX,CAAnB;AACA;;AAEDtB,aAAUC,YAAV,IAA0Be,WAAWb,aAAX,CAA1B;AACA;AArEF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuEC,QAAO;AACNgC,WAASpC,MAAMoC,OADT;AAENC,yBAAuBrC,MAAMqC,qBAFvB;AAGNpC;AAHM,EAAP;AAKA;;AAED;AACA,SAASqC,QAAT,CAAkBC,KAAlB,EACA;AACC,QAAOA,UAAUC,SAAV,IACHD,UAAU,IADP,IAEHA,UAAU,KAFP,IAGFE,MAAMC,OAAN,CAAcH,KAAd,KAAwBA,MAAMI,MAAN,KAAiB,CAH9C;AAIA;;AAED;AACA,SAAS1B,UAAT,CAAoB2B,KAApB,EACA;AACC,QAAOA,MAAMD,MAAN,GAAe,CAAf,IAAoBL,SAASM,MAAMA,MAAMD,MAAN,GAAe,CAArB,CAAT,CAA3B,EACA;AACCC,QAAMC,GAAN;AACA;;AAED,QAAOD,KAAP;AACA","file":"compress.js","sourcesContent":["export default function compress(input)\n{\n\tconst countries = {}\n\n\tfor (const country_code of Object.keys(input.countries))\n\t{\n\t\tconst country = input.countries[country_code]\n\n\t\t// When changing this array also change getters in `./metadata.js`\n\t\tconst country_array =\n\t\t[\n\t\t\tcountry.phone_code,\n\t\t\tcountry.national_number_pattern,\n\n\t\t\tcountry.possible_lengths,\n\t\t\t// country.possible_lengths_local,\n\n\t\t\tcountry.formats.map((format) =>\n\t\t\t{\n\t\t\t\t// When changing this array also change getters in `./metadata.js`\n\t\t\t\tconst format_array =\n\t\t\t\t[\n\t\t\t\t\tformat.pattern,\n\t\t\t\t\tformat.format,\n\t\t\t\t\tformat.leading_digits_patterns,\n\t\t\t\t\tformat.national_prefix_formatting_rule,\n\t\t\t\t\tformat.national_prefix_is_optional_when_formatting,\n\t\t\t\t\tformat.international_format\n\t\t\t\t]\n\n\t\t\t\treturn trim_array(format_array)\n\t\t\t}),\n\n\t\t\tcountry.national_prefix,\n\t\t\tcountry.national_prefix_formatting_rule,\n\t\t\tcountry.national_prefix_for_parsing,\n\t\t\tcountry.national_prefix_transform_rule,\n\t\t\tcountry.national_prefix_is_optional_when_formatting,\n\t\t\tcountry.leading_digits\n\t\t]\n\n\t\tif (country.types)\n\t\t{\n\t\t\tconst types_array =\n\t\t\t[\n\t\t\t\t// These are common\n\t\t\t\tcountry.types.fixed_line,\n\t\t\t\tcountry.types.mobile,\n\t\t\t\tcountry.types.toll_free,\n\t\t\t\tcountry.types.premium_rate,\n\t\t\t\tcountry.types.personal_number,\n\n\t\t\t\t// These are less common\n\t\t\t\tcountry.types.voice_mail,\n\t\t\t\tcountry.types.uan,\n\t\t\t\tcountry.types.pager,\n\t\t\t\tcountry.types.voip,\n\t\t\t\tcountry.types.shared_cost\n\t\t\t]\n\t\t\t.map((type) => type && trim_array\n\t\t\t([\n\t\t\t\ttype.pattern,\n\t\t\t\ttype.possible_lengths\n\t\t\t\t// type.possible_lengths_local\n\t\t\t]))\n\n\t\t\tcountry_array.push(trim_array(types_array))\n\t\t}\n\n\t\tcountries[country_code] = trim_array(country_array)\n\t}\n\n\treturn {\n\t\tversion: input.version,\n\t\tcountry_calling_codes: input.country_calling_codes,\n\t\tcountries\n\t}\n}\n\n// Empty strings are not considered \"empty\".\nfunction is_empty(value)\n{\n\treturn value === undefined\n\t\t|| value === null\n\t\t|| value === false\n\t\t|| (Array.isArray(value) && value.length === 0)\n}\n\n// Removes trailing empty values from an `array`\nfunction trim_array(array)\n{\n\twhile (array.length > 0 && is_empty(array[array.length - 1]))\n\t{\n\t\tarray.pop()\n\t}\n\n\treturn array\n}"]}