{"version":3,"file":"input-format-react.min.js","sources":["../modules/helpers.js","../modules/close braces.js","../modules/format.js","../modules/template formatter.js","../modules/dom.js","../modules/input control.js","../modules/parse.js","../modules/edit.js","../modules/react/Input.js"],"sourcesContent":["// Counts all occurences of a symbol in a string\nexport function count_occurences(symbol, string) {\n  var count = 0; // Using `.split('')` here instead of normal `for ... of`\n  // because the importing application doesn't neccessarily include an ES6 polyfill.\n  // The `.split('')` approach discards \"exotic\" UTF-8 characters\n  // (the ones consisting of four bytes)\n  // but template placeholder characters don't fall into that range\n  // so skipping such miscellaneous \"exotic\" characters\n  // won't matter here for just counting placeholder character occurrences.\n\n  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var character = _ref;\n\n    if (character === symbol) {\n      count++;\n    }\n  }\n\n  return count;\n}\n//# sourceMappingURL=helpers.js.map","import { count_occurences } from './helpers';\nexport default function close_braces(retained_template, template) {\n  var placeholder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'x';\n  var empty_placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' ';\n  var cut_before = retained_template.length;\n  var opening_braces = count_occurences('(', retained_template);\n  var closing_braces = count_occurences(')', retained_template);\n  var dangling_braces = opening_braces - closing_braces;\n\n  while (dangling_braces > 0 && cut_before < template.length) {\n    retained_template += template[cut_before].replace(placeholder, empty_placeholder);\n\n    if (template[cut_before] === ')') {\n      dangling_braces--;\n    }\n\n    cut_before++;\n  }\n\n  return retained_template;\n}\n//# sourceMappingURL=close braces.js.map","import template_formatter from './template formatter'; // Formats `value` value preserving `caret` at the same character.\n//\n// `{ value, caret }` attribute is the result of `parse()` function call.\n//\n// Returns `{ text, caret }` where the new `caret` is the caret position\n// inside `text` text corresponding to the original `caret` position inside `value`.\n//\n// `formatter(value)` is a function returning `{ text, template }`.\n//\n// `text` is the `value` value formatted using `template`.\n// It may either cut off the non-filled right part of the `template`\n// or it may fill the non-filled character placeholders\n// in the right part of the `template` with `spacer`\n// which is a space (' ') character by default.\n//\n// `template` is the template used to format the `value`.\n// It can be either a full-length template or a partial template.\n//\n// `formatter` can also be a string â€” a `template`\n// where character placeholders are denoted by 'x'es.\n// In this case `formatter` function is automatically created.\n//\n// Example:\n//\n// `value` is '880',\n// `caret` is `2` (before the first `0`)\n//\n// `formatter` is `'880' =>\n//   { text: '8 (80 )', template: 'x (xxx) xxx-xx-xx' }`\n//\n// The result is `{ text: '8 (80 )', caret: 4 }`.\n//\n\nexport default function format(value, caret, formatter) {\n  if (typeof formatter === 'string') {\n    formatter = template_formatter(formatter);\n  }\n\n  var _ref = formatter(value) || {},\n      text = _ref.text,\n      template = _ref.template;\n\n  if (text === undefined) {\n    text = value;\n  }\n\n  if (template) {\n    if (caret === undefined) {\n      caret = text.length;\n    } else {\n      var index = 0;\n      var found = false;\n      var possibly_last_input_character_index = -1;\n\n      while (index < text.length && index < template.length) {\n        // Character placeholder found\n        if (text[index] !== template[index]) {\n          if (caret === 0) {\n            found = true;\n            caret = index;\n            break;\n          }\n\n          possibly_last_input_character_index = index;\n          caret--;\n        }\n\n        index++;\n      } // If the caret was positioned after last input character,\n      // then the text caret index is just after the last input character.\n\n\n      if (!found) {\n        caret = possibly_last_input_character_index + 1;\n      }\n    }\n  }\n\n  return {\n    text: text,\n    caret: caret\n  };\n}\n//# sourceMappingURL=format.js.map","import { count_occurences } from './helpers';\nimport close_braces from './close braces'; // Takes a `template` where character placeholders\n// are denoted by 'x'es (e.g. 'x (xxx) xxx-xx-xx').\n//\n// Returns a function which takes `value` characters\n// and returns the `template` filled with those characters.\n// If the `template` can only be partially filled\n// then it is cut off.\n//\n// If `should_close_braces` is `true`,\n// then it will also make sure all dangling braces are closed,\n// e.g. \"8 (8\" -> \"8 (8  )\" (iPhone style phone number input).\n//\n\nexport default function (template) {\n  var placeholder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'x';\n  var should_close_braces = arguments.length > 2 ? arguments[2] : undefined;\n\n  if (!template) {\n    return function (value) {\n      return {\n        text: value\n      };\n    };\n  }\n\n  var characters_in_template = count_occurences(placeholder, template);\n  return function (value) {\n    if (!value) {\n      return {\n        text: '',\n        template: template\n      };\n    }\n\n    var value_character_index = 0;\n    var filled_in_template = ''; // Using `.split('')` here instead of normal `for ... of`\n    // because the importing application doesn't neccessarily include an ES6 polyfill.\n    // The `.split('')` approach discards \"exotic\" UTF-8 characters\n    // (the ones consisting of four bytes)\n    // but template placeholder characters don't fall into that range\n    // and appending UTF-8 characters to a string in parts still works.\n\n    for (var _iterator = template.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var character = _ref;\n\n      if (character !== placeholder) {\n        filled_in_template += character;\n        continue;\n      }\n\n      filled_in_template += value[value_character_index];\n      value_character_index++; // If the last available value character has been filled in,\n      // then return the filled in template\n      // (either trim the right part or retain it,\n      //  if no more character placeholders in there)\n\n      if (value_character_index === value.length) {\n        // If there are more character placeholders\n        // in the right part of the template\n        // then simply trim it.\n        if (value.length < characters_in_template) {\n          break;\n        }\n      }\n    }\n\n    if (should_close_braces) {\n      filled_in_template = close_braces(filled_in_template, template);\n    }\n\n    return {\n      text: filled_in_template,\n      template: template\n    };\n  };\n}\n//# sourceMappingURL=template formatter.js.map","// Gets <input/> selection bounds\nexport function getSelection(element) {\n  // If no selection, return nothing\n  if (element.selectionStart === element.selectionEnd) {\n    return;\n  }\n\n  return {\n    start: element.selectionStart,\n    end: element.selectionEnd\n  };\n} // Key codes\n\nexport var Keys = {\n  Backspace: 8,\n  Delete: 46\n}; // Finds out the operation to be intercepted and performed\n// based on the key down event `keyCode`.\n\nexport function getOperation(event) {\n  switch (event.keyCode) {\n    case Keys.Backspace:\n      return 'Backspace';\n\n    case Keys.Delete:\n      return 'Delete';\n  }\n} // Gets <input/> caret position\n\nexport function getCaretPosition(element) {\n  return element.selectionStart;\n} // Sets <input/> caret position\n\nexport function setCaretPosition(element, caret_position) {\n  // Sanity check\n  if (caret_position === undefined) {\n    return;\n  } // Set caret position.\n  // There has been an issue with caret positioning on Android devices.\n  // https://github.com/catamphetamine/input-format/issues/2\n  // I was revisiting this issue and looked for similar issues in other libraries.\n  // For example, there's [`text-mask`](https://github.com/text-mask/text-mask) library.\n  // They've had exactly the same issue when the caret seemingly refused to be repositioned programmatically.\n  // The symptoms were the same: whenever the caret passed through a non-digit character of a mask (a whitespace, a bracket, a dash, etc), it looked as if it placed itself one character before its correct position.\n  // https://github.com/text-mask/text-mask/issues/300\n  // They seem to have found a basic fix for it: calling `input.setSelectionRange()` in a timeout rather than instantly for Android devices.\n  // https://github.com/text-mask/text-mask/pull/400/files\n  // I've implemented the same workaround here.\n\n\n  if (isAndroid()) {\n    setTimeout(function () {\n      return element.setSelectionRange(caret_position, caret_position);\n    }, 0);\n  } else {\n    element.setSelectionRange(caret_position, caret_position);\n  }\n}\n\nfunction isAndroid() {\n  // `navigator` is not defined when running mocha tests.\n  if (typeof navigator !== 'undefined') {\n    return ANDROID_USER_AGENT_REG_EXP.test(navigator.userAgent);\n  }\n}\n\nvar ANDROID_USER_AGENT_REG_EXP = /Android/i;\n//# sourceMappingURL=dom.js.map","import edit from './edit';\nimport parse from './parse';\nimport format from './format';\nimport { getOperation, getSelection, getCaretPosition, setCaretPosition } from './dom';\nexport function onCut(event, input, _parse, _format, on_change) {\n  // The actual cut hasn't happened just yet hence the timeout.\n  setTimeout(function () {\n    return format_input_text(input, _parse, _format, undefined, on_change);\n  }, 0);\n}\nexport function onPaste(event, input, _parse, _format, on_change) {\n  var selection = getSelection(input); // If selection is made,\n  // just erase the selected text\n  // prior to pasting\n\n  if (selection) {\n    erase_selection(input, selection);\n  }\n\n  format_input_text(input, _parse, _format, undefined, on_change);\n}\nexport function onChange(event, input, _parse, _format, on_change) {\n  format_input_text(input, _parse, _format, undefined, on_change);\n} // Intercepts \"Delete\" and \"Backspace\" keys.\n// (hitting \"Delete\" or \"Backspace\" at any caret\n//  position should always result in rasing a digit)\n\nexport function onKeyDown(event, input, _parse, _format, on_change) {\n  var operation = getOperation(event);\n\n  switch (operation) {\n    case 'Delete':\n    case 'Backspace':\n      // Intercept this operation and perform it manually.\n      event.preventDefault();\n      var selection = getSelection(input); // If selection is made,\n      // just erase the selected text,\n      // and don't apply any more operations to it.\n\n      if (selection) {\n        erase_selection(input, selection);\n        return format_input_text(input, _parse, _format, undefined, on_change);\n      } // Else, perform the (character erasing) operation manually\n\n\n      return format_input_text(input, _parse, _format, operation, on_change);\n\n    default: // Will be handled when `onChange` fires.\n\n  }\n}\n/**\r\n * Erases the selected text inside an `<input/>`.\r\n * @param  {DOMElement} input\r\n * @param  {Selection} selection\r\n */\n\nfunction erase_selection(input, selection) {\n  var text = input.value;\n  text = text.slice(0, selection.start) + text.slice(selection.end);\n  input.value = text;\n  setCaretPosition(input, selection.start);\n}\n/**\r\n * Parses and re-formats `<input/>` textual value.\r\n * E.g. when a user enters something into the `<input/>`\r\n * that raw input must first be parsed and the re-formatted properly.\r\n * Is called either after some user input (e.g. entered a character, pasted something)\r\n * or after the user performed an `operation` (e.g. \"Backspace\", \"Delete\").\r\n * @param  {DOMElement} input\r\n * @param  {Function} parse\r\n * @param  {Function} format\r\n * @param  {string} [operation] - The operation that triggered `<input/>` textual value change. E.g. \"Backspace\", \"Delete\".\r\n * @param  {Function} onChange\r\n */\n\n\nfunction format_input_text(input, _parse, _format, operation, on_change) {\n  // Parse `<input/>` textual value.\n  // Get `value` and `caret` position.\n  var _parse2 = parse(input.value, getCaretPosition(input), _parse),\n      value = _parse2.value,\n      caret = _parse2.caret; // If a user performed an operation (e.g. \"Backspace\", \"Delete\")\n  // then apply that operation and get new `value` and `caret` position.\n\n\n  if (operation) {\n    var operation_applied = edit(value, caret, operation);\n    value = operation_applied.value;\n    caret = operation_applied.caret;\n  } // Format the `value`.\n  // (and reposition the caret accordingly)\n\n\n  var formatted = format(value, caret, _format);\n  var text = formatted.text;\n  caret = formatted.caret; // Set `<input/>` textual value manually\n  // to prevent React from resetting the caret position\n  // later inside subsequent `render()`.\n  // Doesn't work for custom `inputComponent`s for some reason.\n\n  input.value = text; // Position the caret properly.\n\n  setCaretPosition(input, caret); // `<input/>` textual value may have changed,\n  // so the parsed `value` may have changed too.\n  // The `value` didn't neccessarily change\n  // but it might have.\n\n  on_change(value);\n}\n//# sourceMappingURL=input control.js.map","// Parses the `text`.\n//\n// Returns `{ value, caret }` where `caret` is\n// the caret position inside `value`\n// corresponding to the `caret_position` inside `text`.\n//\n// The `text` is parsed by feeding each character sequentially to\n// `parse_character(character, value)` function\n// and appending the result (if it's not `undefined`) to `value`.\n//\n// Example:\n//\n// `text` is `8 (800) 555-35-35`,\n// `caret_position` is `4` (before the first `0`).\n// `parse_character` is `(character, value) =>\n//   if (character >= '0' && character <= '9') { return character }`.\n//\n// then `parse()` outputs `{ value: '88005553535', caret: 2 }`.\n//\nexport default function parse(text, caret_position, parse_character) {\n  var value = '';\n  var focused_input_character_index = 0;\n  var index = 0;\n\n  while (index < text.length) {\n    var character = parse_character(text[index], value);\n\n    if (character !== undefined) {\n      value += character;\n\n      if (caret_position !== undefined) {\n        if (caret_position === index) {\n          focused_input_character_index = value.length - 1;\n        } else if (caret_position > index) {\n          focused_input_character_index = value.length;\n        }\n      }\n    }\n\n    index++;\n  } // If caret position wasn't specified\n\n\n  if (caret_position === undefined) {\n    // Then set caret position to \"after the last input character\"\n    focused_input_character_index = value.length;\n  }\n\n  var result = {\n    value: value,\n    caret: focused_input_character_index\n  };\n  return result;\n}\n//# sourceMappingURL=parse.js.map","// Edits text `value` (if `operation` is passed) and repositions the `caret` if needed.\n//\n// Example:\n//\n// value - '88005553535'\n// caret - 2 // starting from 0; is positioned before the first zero\n// operation - 'Backspace'\n//\n// Returns\n// {\n// \tvalue: '8005553535'\n// \tcaret: 1\n// }\n//\n// Currently supports just 'Delete' and 'Backspace' operations\n//\nexport default function edit(value, caret, operation) {\n  switch (operation) {\n    case 'Backspace':\n      // If there exists the previous character,\n      // then erase it and reposition the caret.\n      if (caret > 0) {\n        // Remove the previous character\n        value = value.slice(0, caret - 1) + value.slice(caret); // Position the caret where the previous (erased) character was\n\n        caret--;\n      }\n\n      break;\n\n    case 'Delete':\n      // Remove current digit (if any)\n      value = value.slice(0, caret) + value.slice(caret + 1);\n      break;\n  }\n\n  return {\n    value: value,\n    caret: caret\n  };\n}\n//# sourceMappingURL=edit.js.map","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n// This is just `./ReactInput.js` rewritten in Hooks.\nimport React, { useCallback, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { onChange as onInputChange, onCut as onInputCut, onPaste as onInputPaste, onKeyDown as onInputKeyDown } from '../input control'; // Usage:\n//\n// <ReactInput\n// \tvalue={this.state.phone}\n// \tonChange={phone => this.setState({ phone })}\n// \tparse={character => character}\n// \tformat={value => ({ text: value, template: 'xxxxxxxx' })}/>\n//\n\nfunction Input(_ref, ref) {\n  var value = _ref.value,\n      parse = _ref.parse,\n      format = _ref.format,\n      InputComponent = _ref.inputComponent,\n      onChange = _ref.onChange,\n      onCut = _ref.onCut,\n      onPaste = _ref.onPaste,\n      onKeyDown = _ref.onKeyDown,\n      rest = _objectWithoutProperties(_ref, [\"value\", \"parse\", \"format\", \"inputComponent\", \"onChange\", \"onCut\", \"onPaste\", \"onKeyDown\"]);\n\n  var ownRef = useRef();\n  ref = ref || ownRef;\n\n  var _onChange = useCallback(function (event) {\n    return onInputChange(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange]);\n\n  var _onPaste = useCallback(function (event) {\n    if (onPaste) {\n      onPaste(event);\n    }\n\n    return onInputPaste(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onPaste]);\n\n  var _onCut = useCallback(function (event) {\n    if (onCut) {\n      onCut(event);\n    }\n\n    return onInputCut(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onCut]);\n\n  var _onKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    return onInputKeyDown(event, ref.current, parse, format, onChange);\n  }, [ref, parse, format, onChange, onKeyDown]);\n\n  return React.createElement(InputComponent, _extends({}, rest, {\n    ref: ref,\n    value: format(isEmptyValue(value) ? '' : value).text,\n    onKeyDown: _onKeyDown,\n    onChange: _onChange,\n    onPaste: _onPaste,\n    onCut: _onCut\n  }));\n}\n\nInput = React.forwardRef(Input);\nInput.propTypes = {\n  // Parses a single characher of `<input/>` text.\n  parse: PropTypes.func.isRequired,\n  // Formats `value` into `<input/>` text.\n  format: PropTypes.func.isRequired,\n  // Renders `<input/>` by default.\n  inputComponent: PropTypes.elementType.isRequired,\n  // `<input/>` `type` attribute.\n  type: PropTypes.string.isRequired,\n  // Is parsed from <input/> text.\n  value: PropTypes.string,\n  // This handler is called each time `<input/>` text is changed.\n  onChange: PropTypes.func.isRequired,\n  // Passthrough\n  onKeyDown: PropTypes.func,\n  onCut: PropTypes.func,\n  onPaste: PropTypes.func\n};\nInput.defaultProps = {\n  // Renders `<input/>` by default.\n  inputComponent: 'input',\n  // `<input/>` `type` attribute.\n  type: 'text'\n};\nexport default Input;\n\nfunction isEmptyValue(value) {\n  return value === undefined || value === null;\n}\n//# sourceMappingURL=Input.js.map"],"names":["count_occurences","symbol","string","count","_iterator","split","_isArray","Array","isArray","_i","Symbol","iterator","_ref","length","next","done","value","close_braces","retained_template","template","placeholder","arguments","undefined","empty_placeholder","cut_before","opening_braces","closing_braces","dangling_braces","replace","format","caret","formatter","should_close_braces","text","characters_in_template","value_character_index","filled_in_template","character","template_formatter","index","found","possibly_last_input_character_index","getSelection","element","selectionStart","selectionEnd","start","end","Keys","setCaretPosition","caret_position","navigator","ANDROID_USER_AGENT_REG_EXP","test","userAgent","isAndroid","setSelectionRange","setTimeout","onKeyDown","event","input","_parse","_format","on_change","operation","keyCode","getOperation","preventDefault","selection","erase_selection","format_input_text","slice","_parse2","parse_character","focused_input_character_index","parse","operation_applied","edit","formatted","_extends","Object","assign","target","i","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Input","ref","InputComponent","inputComponent","onChange","onCut","onPaste","rest","ownRef","useRef","_onChange","useCallback","current","_onPaste","_onCut","_onKeyDown","onInputKeyDown","React","createElement","isEmptyValue","forwardRef","propTypes","PropTypes","func","isRequired","elementType","type","defaultProps"],"mappings":"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"}